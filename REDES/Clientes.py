#!/usr/bin/env python3import socketfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modesfrom cryptography.hazmat.backends import default_backendimport threadingkey = Nonelista = Nonenonce = b"0123456789ABCDEF"socket_cliente = Nonehilo_recepcion = Nonedef encrip(mensaje):	if len(key) not in [16, 24, 32]:		raise ValueError("La longitud de la clave debe ser 16, 24 o 32 bytes para AES")	cipher = Cipher(algorithms.AES(key), modes.CTR(nonce), backend=default_backend())	encryptor = cipher.encryptor()	mensaje = encryptor.update(mensaje.encode('utf-8')) + encryptor.finalize()	return mensajedef desencrip(mensaje):	if len(key) not in [16, 24, 32]:		raise ValueError("La longitud de la clave debe ser 16, 24 o 32 bytes para AES")	cipher = Cipher(algorithms.AES(key), modes.CTR(nonce), backend=default_backend())	decryptor = cipher.decryptor()	decrypted_message = decryptor.update(mensaje) + decryptor.finalize()	mensaje = decrypted_message.decode('utf-8')	return mensajedef recibir_mensajes(sock):    while True:        try:            datos = sock.recv(1024)            if not datos:                break            mensaje = datos.decode('utf-8')			#mensaje = decode(datos)            print(f"Mensaje recibido: {mensaje}")        except ConnectionResetError:            print("Conexi√≥n cerrada por el servidor.")            breakdef inicio():	#conectar	global socket_cliente	global hilo_recepcion	global key	global lista	server_address = ('10.0.0.3', 12345)	socket_cliente = socket.socket(socket.AF_INET, socket.SOCK_STREAM)	socket_cliente.connect(server_address)	#recibir datos	key = socket_cliente.recv(1024)	lista = socket_cliente.recv(1024)	hilo_recepcion = threading.Thread(target=recibir_mensajes, args=(socket_cliente,))	hilo_recepcion.start()def cerrar():	global socket_cliente	socket_cliente.close()inicio()while True:	ID_cliente = input("ID cliente: ")	ID_cliente_enc = encrip(ID_cliente)	Mensaje = input('Mensaje: ')	Mensaje_enc = encrip(Mensaje)	print(f"Cliente {ID_cliente} Mensaje: {Mensaje}")	socket_cliente.send(ID_cliente_enc)	socket_cliente.send(Mensaje_enc)	if Mensaje == 'exit':		breakhilo_recepcion.join()cerrar()